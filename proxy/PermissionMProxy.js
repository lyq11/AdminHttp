// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "PermissionM.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var civetAdminCenter = civetAdminCenter || {};
module.exports.civetAdminCenter = civetAdminCenter;

civetAdminCenter.PermissionMProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

civetAdminCenter.PermissionMProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

civetAdminCenter.PermissionMProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

civetAdminCenter.PermissionMProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

civetAdminCenter.PermissionMProxy.prototype.getVersion = function () {
    return this._worker.version;
};

civetAdminCenter.AdminRole = function() {
    this.id = 0;
    this.roleName = "";
    this.name = "";
    this.created = "";
    this.updated = "";
    this._classname = "civetAdminCenter.AdminRole";
};
civetAdminCenter.AdminRole._classname = "civetAdminCenter.AdminRole";
civetAdminCenter.AdminRole._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetAdminCenter.AdminRole._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetAdminCenter.AdminRole._readFrom = function (is) {
    var tmp = new civetAdminCenter.AdminRole;
    tmp.id = is.readInt32(0, true, 0);
    tmp.roleName = is.readString(1, false, "");
    tmp.name = is.readString(2, false, "");
    tmp.created = is.readString(3, false, "");
    tmp.updated = is.readString(4, false, "");
    return tmp;
};
civetAdminCenter.AdminRole.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.roleName);
    os.writeString(2, this.name);
    os.writeString(3, this.created);
    os.writeString(4, this.updated);
};
civetAdminCenter.AdminRole.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetAdminCenter.AdminRole.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetAdminCenter.AdminRole.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "roleName" : this.roleName,
        "name" : this.name,
        "created" : this.created,
        "updated" : this.updated
    };
};
civetAdminCenter.AdminRole.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "roleName") && (this.roleName = json.roleName);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "created") && (this.created = json.created);
    _hasOwnProperty.call(json, "updated") && (this.updated = json.updated);
    return this;
};
civetAdminCenter.AdminRole.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetAdminCenter.AdminRole.new = function () {
    return new civetAdminCenter.AdminRole();
};
civetAdminCenter.AdminRole.create = function (is) {
    return civetAdminCenter.AdminRole._readFrom(is);
};

civetAdminCenter.AdminRoleHasPermission = function() {
    this.id = 0;
    this.role_id = 0;
    this.Permission_id = 0;
    this.create_time = 0;
    this.update_time = 0;
    this.uni_id = "";
    this._classname = "civetAdminCenter.AdminRoleHasPermission";
};
civetAdminCenter.AdminRoleHasPermission._classname = "civetAdminCenter.AdminRoleHasPermission";
civetAdminCenter.AdminRoleHasPermission._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetAdminCenter.AdminRoleHasPermission._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetAdminCenter.AdminRoleHasPermission._readFrom = function (is) {
    var tmp = new civetAdminCenter.AdminRoleHasPermission;
    tmp.id = is.readInt32(0, true, 0);
    tmp.role_id = is.readInt32(1, false, 0);
    tmp.Permission_id = is.readInt32(2, false, 0);
    tmp.create_time = is.readInt32(3, false, 0);
    tmp.update_time = is.readInt32(4, false, 0);
    tmp.uni_id = is.readString(5, false, "");
    return tmp;
};
civetAdminCenter.AdminRoleHasPermission.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.role_id);
    os.writeInt32(2, this.Permission_id);
    os.writeInt32(3, this.create_time);
    os.writeInt32(4, this.update_time);
    os.writeString(5, this.uni_id);
};
civetAdminCenter.AdminRoleHasPermission.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetAdminCenter.AdminRoleHasPermission.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetAdminCenter.AdminRoleHasPermission.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "role_id" : this.role_id,
        "Permission_id" : this.Permission_id,
        "create_time" : this.create_time,
        "update_time" : this.update_time,
        "uni_id" : this.uni_id
    };
};
civetAdminCenter.AdminRoleHasPermission.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "role_id") && (this.role_id = json.role_id);
    _hasOwnProperty.call(json, "Permission_id") && (this.Permission_id = json.Permission_id);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "update_time") && (this.update_time = json.update_time);
    _hasOwnProperty.call(json, "uni_id") && (this.uni_id = json.uni_id);
    return this;
};
civetAdminCenter.AdminRoleHasPermission.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetAdminCenter.AdminRoleHasPermission.new = function () {
    return new civetAdminCenter.AdminRoleHasPermission();
};
civetAdminCenter.AdminRoleHasPermission.create = function (is) {
    return civetAdminCenter.AdminRoleHasPermission._readFrom(is);
};

civetAdminCenter.Permission = function() {
    this.id = 0;
    this.tag = "";
    this.name = "";
    this.summarize = "";
    this.path = "";
    this._classname = "civetAdminCenter.Permission";
};
civetAdminCenter.Permission._classname = "civetAdminCenter.Permission";
civetAdminCenter.Permission._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetAdminCenter.Permission._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetAdminCenter.Permission._readFrom = function (is) {
    var tmp = new civetAdminCenter.Permission;
    tmp.id = is.readInt32(0, true, 0);
    tmp.tag = is.readString(1, false, "");
    tmp.name = is.readString(2, false, "");
    tmp.summarize = is.readString(3, false, "");
    tmp.path = is.readString(4, false, "");
    return tmp;
};
civetAdminCenter.Permission.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.tag);
    os.writeString(2, this.name);
    os.writeString(3, this.summarize);
    os.writeString(4, this.path);
};
civetAdminCenter.Permission.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetAdminCenter.Permission.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetAdminCenter.Permission.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "tag" : this.tag,
        "name" : this.name,
        "summarize" : this.summarize,
        "path" : this.path
    };
};
civetAdminCenter.Permission.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "tag") && (this.tag = json.tag);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "summarize") && (this.summarize = json.summarize);
    _hasOwnProperty.call(json, "path") && (this.path = json.path);
    return this;
};
civetAdminCenter.Permission.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetAdminCenter.Permission.new = function () {
    return new civetAdminCenter.Permission();
};
civetAdminCenter.Permission.create = function (is) {
    return civetAdminCenter.Permission._readFrom(is);
};

var __civetAdminCenter_PermissionM$bindRoleAndRights$IF = {
    "name" : "bindRoleAndRights",
    "return" : "int32",
    "arguments" : [{
        "name" : "newRoleHasRight",
        "class" : "civetAdminCenter.AdminRoleHasPermission",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$bindRoleAndRights$IE = function (newRoleHasRight) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newRoleHasRight);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$bindRoleAndRights$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$bindRoleAndRights$PE = function (newRoleHasRight, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newRoleHasRight", newRoleHasRight);
    return tup;
};

var __civetAdminCenter_PermissionM$bindRoleAndRights$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$bindRoleAndRights$ER = function (data) {
    throw _makeError(data, "Call PermissionM::bindRoleAndRights failed");
};

civetAdminCenter.PermissionMProxy.prototype.bindRoleAndRights = function (newRoleHasRight) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("bindRoleAndRights", __civetAdminCenter_PermissionM$bindRoleAndRights$PE(newRoleHasRight, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$bindRoleAndRights$IF).then(__civetAdminCenter_PermissionM$bindRoleAndRights$PD, __civetAdminCenter_PermissionM$bindRoleAndRights$ER);
    } else {
        return this._worker.tars_invoke("bindRoleAndRights", __civetAdminCenter_PermissionM$bindRoleAndRights$IE(newRoleHasRight), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$bindRoleAndRights$IF).then(__civetAdminCenter_PermissionM$bindRoleAndRights$ID, __civetAdminCenter_PermissionM$bindRoleAndRights$ER);
    }
};
civetAdminCenter.PermissionMProxy.bindRoleAndRights = __civetAdminCenter_PermissionM$bindRoleAndRights$IF;

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$IF = {
    "name" : "checkRoleHasPermissionByID",
    "return" : "int32",
    "arguments" : [{
        "name" : "roleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "rightID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$IE = function (roleID, rightID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, roleID);
    os.writeInt32(2, rightID);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$PE = function (roleID, rightID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("roleID", roleID);
    tup.writeInt32("rightID", rightID);
    return tup;
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$ER = function (data) {
    throw _makeError(data, "Call PermissionM::checkRoleHasPermissionByID failed");
};

civetAdminCenter.PermissionMProxy.prototype.checkRoleHasPermissionByID = function (roleID, rightID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkRoleHasPermissionByID", __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$PE(roleID, rightID, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$IF).then(__civetAdminCenter_PermissionM$checkRoleHasPermissionByID$PD, __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$ER);
    } else {
        return this._worker.tars_invoke("checkRoleHasPermissionByID", __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$IE(roleID, rightID), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$IF).then(__civetAdminCenter_PermissionM$checkRoleHasPermissionByID$ID, __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$ER);
    }
};
civetAdminCenter.PermissionMProxy.checkRoleHasPermissionByID = __civetAdminCenter_PermissionM$checkRoleHasPermissionByID$IF;

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$IF = {
    "name" : "checkRoleHasPermissionByPath",
    "return" : "int32",
    "arguments" : [{
        "name" : "roleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Path",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$IE = function (roleID, Path) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, roleID);
    os.writeString(2, Path);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$PE = function (roleID, Path, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("roleID", roleID);
    tup.writeString("Path", Path);
    return tup;
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$ER = function (data) {
    throw _makeError(data, "Call PermissionM::checkRoleHasPermissionByPath failed");
};

civetAdminCenter.PermissionMProxy.prototype.checkRoleHasPermissionByPath = function (roleID, Path) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkRoleHasPermissionByPath", __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$PE(roleID, Path, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$IF).then(__civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$PD, __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$ER);
    } else {
        return this._worker.tars_invoke("checkRoleHasPermissionByPath", __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$IE(roleID, Path), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$IF).then(__civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$ID, __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$ER);
    }
};
civetAdminCenter.PermissionMProxy.checkRoleHasPermissionByPath = __civetAdminCenter_PermissionM$checkRoleHasPermissionByPath$IF;

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$IF = {
    "name" : "checkRoleHasPermissionByTag",
    "return" : "int32",
    "arguments" : [{
        "name" : "roleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "rightsTag",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$IE = function (roleID, rightsTag) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, roleID);
    os.writeString(2, rightsTag);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$PE = function (roleID, rightsTag, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("roleID", roleID);
    tup.writeString("rightsTag", rightsTag);
    return tup;
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$ER = function (data) {
    throw _makeError(data, "Call PermissionM::checkRoleHasPermissionByTag failed");
};

civetAdminCenter.PermissionMProxy.prototype.checkRoleHasPermissionByTag = function (roleID, rightsTag) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkRoleHasPermissionByTag", __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$PE(roleID, rightsTag, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$IF).then(__civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$PD, __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$ER);
    } else {
        return this._worker.tars_invoke("checkRoleHasPermissionByTag", __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$IE(roleID, rightsTag), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$IF).then(__civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$ID, __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$ER);
    }
};
civetAdminCenter.PermissionMProxy.checkRoleHasPermissionByTag = __civetAdminCenter_PermissionM$checkRoleHasPermissionByTag$IF;

var __civetAdminCenter_PermissionM$createPermission$IF = {
    "name" : "createPermission",
    "return" : "int32",
    "arguments" : [{
        "name" : "newCRight",
        "class" : "civetAdminCenter.Permission",
        "direction" : "in"
    }, {
        "name" : "c",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$createPermission$IE = function (newCRight) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newCRight);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$createPermission$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "c" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$createPermission$PE = function (newCRight, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newCRight", newCRight);
    return tup;
};

var __civetAdminCenter_PermissionM$createPermission$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "c" : tup.readInt32("c")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$createPermission$ER = function (data) {
    throw _makeError(data, "Call PermissionM::createPermission failed");
};

civetAdminCenter.PermissionMProxy.prototype.createPermission = function (newCRight) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createPermission", __civetAdminCenter_PermissionM$createPermission$PE(newCRight, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$createPermission$IF).then(__civetAdminCenter_PermissionM$createPermission$PD, __civetAdminCenter_PermissionM$createPermission$ER);
    } else {
        return this._worker.tars_invoke("createPermission", __civetAdminCenter_PermissionM$createPermission$IE(newCRight), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$createPermission$IF).then(__civetAdminCenter_PermissionM$createPermission$ID, __civetAdminCenter_PermissionM$createPermission$ER);
    }
};
civetAdminCenter.PermissionMProxy.createPermission = __civetAdminCenter_PermissionM$createPermission$IF;

var __civetAdminCenter_PermissionM$createRole$IF = {
    "name" : "createRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "newRole",
        "class" : "civetAdminCenter.AdminRole",
        "direction" : "in"
    }, {
        "name" : "c",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$createRole$IE = function (newRole) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newRole);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$createRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "c" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$createRole$PE = function (newRole, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newRole", newRole);
    return tup;
};

var __civetAdminCenter_PermissionM$createRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "c" : tup.readInt32("c")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$createRole$ER = function (data) {
    throw _makeError(data, "Call PermissionM::createRole failed");
};

civetAdminCenter.PermissionMProxy.prototype.createRole = function (newRole) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createRole", __civetAdminCenter_PermissionM$createRole$PE(newRole, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$createRole$IF).then(__civetAdminCenter_PermissionM$createRole$PD, __civetAdminCenter_PermissionM$createRole$ER);
    } else {
        return this._worker.tars_invoke("createRole", __civetAdminCenter_PermissionM$createRole$IE(newRole), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$createRole$IF).then(__civetAdminCenter_PermissionM$createRole$ID, __civetAdminCenter_PermissionM$createRole$ER);
    }
};
civetAdminCenter.PermissionMProxy.createRole = __civetAdminCenter_PermissionM$createRole$IF;

var __civetAdminCenter_PermissionM$deletePermission$IF = {
    "name" : "deletePermission",
    "return" : "int32",
    "arguments" : [{
        "name" : "RightsID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$deletePermission$IE = function (RightsID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, RightsID);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$deletePermission$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$deletePermission$PE = function (RightsID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("RightsID", RightsID);
    return tup;
};

var __civetAdminCenter_PermissionM$deletePermission$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$deletePermission$ER = function (data) {
    throw _makeError(data, "Call PermissionM::deletePermission failed");
};

civetAdminCenter.PermissionMProxy.prototype.deletePermission = function (RightsID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deletePermission", __civetAdminCenter_PermissionM$deletePermission$PE(RightsID, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$deletePermission$IF).then(__civetAdminCenter_PermissionM$deletePermission$PD, __civetAdminCenter_PermissionM$deletePermission$ER);
    } else {
        return this._worker.tars_invoke("deletePermission", __civetAdminCenter_PermissionM$deletePermission$IE(RightsID), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$deletePermission$IF).then(__civetAdminCenter_PermissionM$deletePermission$ID, __civetAdminCenter_PermissionM$deletePermission$ER);
    }
};
civetAdminCenter.PermissionMProxy.deletePermission = __civetAdminCenter_PermissionM$deletePermission$IF;

var __civetAdminCenter_PermissionM$deleteRole$IF = {
    "name" : "deleteRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "roleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$deleteRole$IE = function (roleID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, roleID);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$deleteRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$deleteRole$PE = function (roleID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("roleID", roleID);
    return tup;
};

var __civetAdminCenter_PermissionM$deleteRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$deleteRole$ER = function (data) {
    throw _makeError(data, "Call PermissionM::deleteRole failed");
};

civetAdminCenter.PermissionMProxy.prototype.deleteRole = function (roleID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deleteRole", __civetAdminCenter_PermissionM$deleteRole$PE(roleID, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$deleteRole$IF).then(__civetAdminCenter_PermissionM$deleteRole$PD, __civetAdminCenter_PermissionM$deleteRole$ER);
    } else {
        return this._worker.tars_invoke("deleteRole", __civetAdminCenter_PermissionM$deleteRole$IE(roleID), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$deleteRole$IF).then(__civetAdminCenter_PermissionM$deleteRole$ID, __civetAdminCenter_PermissionM$deleteRole$ER);
    }
};
civetAdminCenter.PermissionMProxy.deleteRole = __civetAdminCenter_PermissionM$deleteRole$IF;

var __civetAdminCenter_PermissionM$queryPermission$IF = {
    "name" : "queryPermission",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Rights",
        "class" : "list(civetAdminCenter.Permission)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryPermission$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryPermission$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Rights" : is.readList(3, true, TarsStream.List(civetAdminCenter.Permission)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryPermission$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __civetAdminCenter_PermissionM$queryPermission$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Rights" : tup.readList("Rights", TarsStream.List(civetAdminCenter.Permission)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryPermission$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryPermission failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryPermission = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryPermission", __civetAdminCenter_PermissionM$queryPermission$PE(offset, limit, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryPermission$IF).then(__civetAdminCenter_PermissionM$queryPermission$PD, __civetAdminCenter_PermissionM$queryPermission$ER);
    } else {
        return this._worker.tars_invoke("queryPermission", __civetAdminCenter_PermissionM$queryPermission$IE(offset, limit), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryPermission$IF).then(__civetAdminCenter_PermissionM$queryPermission$ID, __civetAdminCenter_PermissionM$queryPermission$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryPermission = __civetAdminCenter_PermissionM$queryPermission$IF;

var __civetAdminCenter_PermissionM$queryPermissionByCondition$IF = {
    "name" : "queryPermissionByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "Rights",
        "class" : "list(civetAdminCenter.Permission)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryPermissionByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryPermissionByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Rights" : is.readList(5, true, TarsStream.List(civetAdminCenter.Permission)),
                    "result" : is.readInt32(6, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryPermissionByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __civetAdminCenter_PermissionM$queryPermissionByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Rights" : tup.readList("Rights", TarsStream.List(civetAdminCenter.Permission)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryPermissionByCondition$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryPermissionByCondition failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryPermissionByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryPermissionByCondition", __civetAdminCenter_PermissionM$queryPermissionByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryPermissionByCondition$IF).then(__civetAdminCenter_PermissionM$queryPermissionByCondition$PD, __civetAdminCenter_PermissionM$queryPermissionByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryPermissionByCondition", __civetAdminCenter_PermissionM$queryPermissionByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryPermissionByCondition$IF).then(__civetAdminCenter_PermissionM$queryPermissionByCondition$ID, __civetAdminCenter_PermissionM$queryPermissionByCondition$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryPermissionByCondition = __civetAdminCenter_PermissionM$queryPermissionByCondition$IF;

var __civetAdminCenter_PermissionM$queryRole$IF = {
    "name" : "queryRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "role",
        "class" : "list(civetAdminCenter.AdminRole)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryRole$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "role" : is.readList(3, true, TarsStream.List(civetAdminCenter.AdminRole)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRole$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __civetAdminCenter_PermissionM$queryRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "role" : tup.readList("role", TarsStream.List(civetAdminCenter.AdminRole)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRole$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryRole failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryRole = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRole", __civetAdminCenter_PermissionM$queryRole$PE(offset, limit, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRole$IF).then(__civetAdminCenter_PermissionM$queryRole$PD, __civetAdminCenter_PermissionM$queryRole$ER);
    } else {
        return this._worker.tars_invoke("queryRole", __civetAdminCenter_PermissionM$queryRole$IE(offset, limit), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRole$IF).then(__civetAdminCenter_PermissionM$queryRole$ID, __civetAdminCenter_PermissionM$queryRole$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryRole = __civetAdminCenter_PermissionM$queryRole$IF;

var __civetAdminCenter_PermissionM$queryRoleByCondition$IF = {
    "name" : "queryRoleByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "role",
        "class" : "list(civetAdminCenter.AdminRole)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryRoleByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryRoleByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "role" : is.readList(5, true, TarsStream.List(civetAdminCenter.AdminRole)),
                    "result" : is.readInt32(6, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRoleByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __civetAdminCenter_PermissionM$queryRoleByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "role" : tup.readList("role", TarsStream.List(civetAdminCenter.AdminRole)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRoleByCondition$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryRoleByCondition failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryRoleByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRoleByCondition", __civetAdminCenter_PermissionM$queryRoleByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRoleByCondition$IF).then(__civetAdminCenter_PermissionM$queryRoleByCondition$PD, __civetAdminCenter_PermissionM$queryRoleByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryRoleByCondition", __civetAdminCenter_PermissionM$queryRoleByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRoleByCondition$IF).then(__civetAdminCenter_PermissionM$queryRoleByCondition$ID, __civetAdminCenter_PermissionM$queryRoleByCondition$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryRoleByCondition = __civetAdminCenter_PermissionM$queryRoleByCondition$IF;

var __civetAdminCenter_PermissionM$queryRolePermission$IF = {
    "name" : "queryRolePermission",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "binds",
        "class" : "list(civetAdminCenter.AdminRoleHasPermission)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryRolePermission$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryRolePermission$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "binds" : is.readList(3, true, TarsStream.List(civetAdminCenter.AdminRoleHasPermission)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRolePermission$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __civetAdminCenter_PermissionM$queryRolePermission$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "binds" : tup.readList("binds", TarsStream.List(civetAdminCenter.AdminRoleHasPermission)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRolePermission$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryRolePermission failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryRolePermission = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRolePermission", __civetAdminCenter_PermissionM$queryRolePermission$PE(offset, limit, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRolePermission$IF).then(__civetAdminCenter_PermissionM$queryRolePermission$PD, __civetAdminCenter_PermissionM$queryRolePermission$ER);
    } else {
        return this._worker.tars_invoke("queryRolePermission", __civetAdminCenter_PermissionM$queryRolePermission$IE(offset, limit), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRolePermission$IF).then(__civetAdminCenter_PermissionM$queryRolePermission$ID, __civetAdminCenter_PermissionM$queryRolePermission$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryRolePermission = __civetAdminCenter_PermissionM$queryRolePermission$IF;

var __civetAdminCenter_PermissionM$queryRolePermissionByCondition$IF = {
    "name" : "queryRolePermissionByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "binds",
        "class" : "list(civetAdminCenter.AdminRoleHasPermission)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryRolePermissionByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryRolePermissionByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "binds" : is.readList(5, true, TarsStream.List(civetAdminCenter.AdminRoleHasPermission)),
                    "result" : is.readInt32(6, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRolePermissionByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __civetAdminCenter_PermissionM$queryRolePermissionByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "binds" : tup.readList("binds", TarsStream.List(civetAdminCenter.AdminRoleHasPermission)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRolePermissionByCondition$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryRolePermissionByCondition failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryRolePermissionByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRolePermissionByCondition", __civetAdminCenter_PermissionM$queryRolePermissionByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRolePermissionByCondition$IF).then(__civetAdminCenter_PermissionM$queryRolePermissionByCondition$PD, __civetAdminCenter_PermissionM$queryRolePermissionByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryRolePermissionByCondition", __civetAdminCenter_PermissionM$queryRolePermissionByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRolePermissionByCondition$IF).then(__civetAdminCenter_PermissionM$queryRolePermissionByCondition$ID, __civetAdminCenter_PermissionM$queryRolePermissionByCondition$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryRolePermissionByCondition = __civetAdminCenter_PermissionM$queryRolePermissionByCondition$IF;

var __civetAdminCenter_PermissionM$queryRolehasPermission$IF = {
    "name" : "queryRolehasPermission",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "roleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Rights",
        "class" : "list(civetAdminCenter.Permission)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$queryRolehasPermission$IE = function (offset, limit, roleID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeInt32(3, roleID);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$queryRolehasPermission$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Rights" : is.readList(4, true, TarsStream.List(civetAdminCenter.Permission)),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRolehasPermission$PE = function (offset, limit, roleID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeInt32("roleID", roleID);
    return tup;
};

var __civetAdminCenter_PermissionM$queryRolehasPermission$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Rights" : tup.readList("Rights", TarsStream.List(civetAdminCenter.Permission)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$queryRolehasPermission$ER = function (data) {
    throw _makeError(data, "Call PermissionM::queryRolehasPermission failed");
};

civetAdminCenter.PermissionMProxy.prototype.queryRolehasPermission = function (offset, limit, roleID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRolehasPermission", __civetAdminCenter_PermissionM$queryRolehasPermission$PE(offset, limit, roleID, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRolehasPermission$IF).then(__civetAdminCenter_PermissionM$queryRolehasPermission$PD, __civetAdminCenter_PermissionM$queryRolehasPermission$ER);
    } else {
        return this._worker.tars_invoke("queryRolehasPermission", __civetAdminCenter_PermissionM$queryRolehasPermission$IE(offset, limit, roleID), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$queryRolehasPermission$IF).then(__civetAdminCenter_PermissionM$queryRolehasPermission$ID, __civetAdminCenter_PermissionM$queryRolehasPermission$ER);
    }
};
civetAdminCenter.PermissionMProxy.queryRolehasPermission = __civetAdminCenter_PermissionM$queryRolehasPermission$IF;

var __civetAdminCenter_PermissionM$unBindRoleAndRights$IF = {
    "name" : "unBindRoleAndRights",
    "return" : "int32",
    "arguments" : [{
        "name" : "RoleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$unBindRoleAndRights$IE = function (RoleID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, RoleID);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$unBindRoleAndRights$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$unBindRoleAndRights$PE = function (RoleID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("RoleID", RoleID);
    return tup;
};

var __civetAdminCenter_PermissionM$unBindRoleAndRights$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$unBindRoleAndRights$ER = function (data) {
    throw _makeError(data, "Call PermissionM::unBindRoleAndRights failed");
};

civetAdminCenter.PermissionMProxy.prototype.unBindRoleAndRights = function (RoleID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("unBindRoleAndRights", __civetAdminCenter_PermissionM$unBindRoleAndRights$PE(RoleID, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$unBindRoleAndRights$IF).then(__civetAdminCenter_PermissionM$unBindRoleAndRights$PD, __civetAdminCenter_PermissionM$unBindRoleAndRights$ER);
    } else {
        return this._worker.tars_invoke("unBindRoleAndRights", __civetAdminCenter_PermissionM$unBindRoleAndRights$IE(RoleID), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$unBindRoleAndRights$IF).then(__civetAdminCenter_PermissionM$unBindRoleAndRights$ID, __civetAdminCenter_PermissionM$unBindRoleAndRights$ER);
    }
};
civetAdminCenter.PermissionMProxy.unBindRoleAndRights = __civetAdminCenter_PermissionM$unBindRoleAndRights$IF;

var __civetAdminCenter_PermissionM$updatePermission$IF = {
    "name" : "updatePermission",
    "return" : "int32",
    "arguments" : [{
        "name" : "newCRight",
        "class" : "civetAdminCenter.Permission",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$updatePermission$IE = function (newCRight, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newCRight);
    os.writeString(2, keys);
    os.writeString(3, value);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$updatePermission$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$updatePermission$PE = function (newCRight, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newCRight", newCRight);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __civetAdminCenter_PermissionM$updatePermission$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$updatePermission$ER = function (data) {
    throw _makeError(data, "Call PermissionM::updatePermission failed");
};

civetAdminCenter.PermissionMProxy.prototype.updatePermission = function (newCRight, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("updatePermission", __civetAdminCenter_PermissionM$updatePermission$PE(newCRight, keys, value, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$updatePermission$IF).then(__civetAdminCenter_PermissionM$updatePermission$PD, __civetAdminCenter_PermissionM$updatePermission$ER);
    } else {
        return this._worker.tars_invoke("updatePermission", __civetAdminCenter_PermissionM$updatePermission$IE(newCRight, keys, value), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$updatePermission$IF).then(__civetAdminCenter_PermissionM$updatePermission$ID, __civetAdminCenter_PermissionM$updatePermission$ER);
    }
};
civetAdminCenter.PermissionMProxy.updatePermission = __civetAdminCenter_PermissionM$updatePermission$IF;

var __civetAdminCenter_PermissionM$updateRole$IF = {
    "name" : "updateRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "newRole",
        "class" : "civetAdminCenter.AdminRole",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_PermissionM$updateRole$IE = function (newRole, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newRole);
    os.writeString(2, keys);
    os.writeString(3, value);
    return os.getBinBuffer();
};

var __civetAdminCenter_PermissionM$updateRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$updateRole$PE = function (newRole, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newRole", newRole);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __civetAdminCenter_PermissionM$updateRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_PermissionM$updateRole$ER = function (data) {
    throw _makeError(data, "Call PermissionM::updateRole failed");
};

civetAdminCenter.PermissionMProxy.prototype.updateRole = function (newRole, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("updateRole", __civetAdminCenter_PermissionM$updateRole$PE(newRole, keys, value, version), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$updateRole$IF).then(__civetAdminCenter_PermissionM$updateRole$PD, __civetAdminCenter_PermissionM$updateRole$ER);
    } else {
        return this._worker.tars_invoke("updateRole", __civetAdminCenter_PermissionM$updateRole$IE(newRole, keys, value), arguments[arguments.length - 1], __civetAdminCenter_PermissionM$updateRole$IF).then(__civetAdminCenter_PermissionM$updateRole$ID, __civetAdminCenter_PermissionM$updateRole$ER);
    }
};
civetAdminCenter.PermissionMProxy.updateRole = __civetAdminCenter_PermissionM$updateRole$IF;



