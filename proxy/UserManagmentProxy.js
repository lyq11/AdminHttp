// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "UserManagment.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var civetAdminCenter = civetAdminCenter || {};
module.exports.civetAdminCenter = civetAdminCenter;

civetAdminCenter.UserManagmentProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

civetAdminCenter.UserManagmentProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

civetAdminCenter.UserManagmentProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

civetAdminCenter.UserManagmentProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

civetAdminCenter.UserManagmentProxy.prototype.getVersion = function () {
    return this._worker.version;
};

civetAdminCenter.AdminBasicInfo = function() {
    this.id = 0;
    this.username = "";
    this.name = "";
    this.password = "";
    this.number = "";
    this.email = "";
    this.sex = "";
    this.enable = "";
    this.role = 0;
    this.createTime = 0;
    this.UpdateTime = 0;
    this._classname = "civetAdminCenter.AdminBasicInfo";
};
civetAdminCenter.AdminBasicInfo._classname = "civetAdminCenter.AdminBasicInfo";
civetAdminCenter.AdminBasicInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetAdminCenter.AdminBasicInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetAdminCenter.AdminBasicInfo._readFrom = function (is) {
    var tmp = new civetAdminCenter.AdminBasicInfo;
    tmp.id = is.readInt32(0, true, 0);
    tmp.username = is.readString(1, false, "");
    tmp.name = is.readString(2, false, "");
    tmp.password = is.readString(3, false, "");
    tmp.number = is.readString(4, false, "");
    tmp.email = is.readString(5, false, "");
    tmp.sex = is.readString(6, false, "");
    tmp.enable = is.readString(7, false, "");
    tmp.role = is.readInt32(8, false, 0);
    tmp.createTime = is.readInt64(9, false, 0);
    tmp.UpdateTime = is.readInt64(10, false, 0);
    return tmp;
};
civetAdminCenter.AdminBasicInfo.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.username);
    os.writeString(2, this.name);
    os.writeString(3, this.password);
    os.writeString(4, this.number);
    os.writeString(5, this.email);
    os.writeString(6, this.sex);
    os.writeString(7, this.enable);
    os.writeInt32(8, this.role);
    os.writeInt64(9, this.createTime);
    os.writeInt64(10, this.UpdateTime);
};
civetAdminCenter.AdminBasicInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetAdminCenter.AdminBasicInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetAdminCenter.AdminBasicInfo.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "username" : this.username,
        "name" : this.name,
        "password" : this.password,
        "number" : this.number,
        "email" : this.email,
        "sex" : this.sex,
        "enable" : this.enable,
        "role" : this.role,
        "createTime" : this.createTime,
        "UpdateTime" : this.UpdateTime
    };
};
civetAdminCenter.AdminBasicInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "username") && (this.username = json.username);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "password") && (this.password = json.password);
    _hasOwnProperty.call(json, "number") && (this.number = json.number);
    _hasOwnProperty.call(json, "email") && (this.email = json.email);
    _hasOwnProperty.call(json, "sex") && (this.sex = json.sex);
    _hasOwnProperty.call(json, "enable") && (this.enable = json.enable);
    _hasOwnProperty.call(json, "role") && (this.role = json.role);
    _hasOwnProperty.call(json, "createTime") && (this.createTime = json.createTime);
    _hasOwnProperty.call(json, "UpdateTime") && (this.UpdateTime = json.UpdateTime);
    return this;
};
civetAdminCenter.AdminBasicInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetAdminCenter.AdminBasicInfo.new = function () {
    return new civetAdminCenter.AdminBasicInfo();
};
civetAdminCenter.AdminBasicInfo.create = function (is) {
    return civetAdminCenter.AdminBasicInfo._readFrom(is);
};

var __civetAdminCenter_UserManagment$adminAdd$IF = {
    "name" : "adminAdd",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminBasicInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminAdd$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminAdd$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminAdd$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __civetAdminCenter_UserManagment$adminAdd$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminAdd$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminAdd failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminAdd = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminAdd", __civetAdminCenter_UserManagment$adminAdd$PE(info, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminAdd$IF).then(__civetAdminCenter_UserManagment$adminAdd$PD, __civetAdminCenter_UserManagment$adminAdd$ER);
    } else {
        return this._worker.tars_invoke("adminAdd", __civetAdminCenter_UserManagment$adminAdd$IE(info), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminAdd$IF).then(__civetAdminCenter_UserManagment$adminAdd$ID, __civetAdminCenter_UserManagment$adminAdd$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminAdd = __civetAdminCenter_UserManagment$adminAdd$IF;

var __civetAdminCenter_UserManagment$adminCheckPassword$IF = {
    "name" : "adminCheckPassword",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminBasicInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "bool",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminCheckPassword$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminCheckPassword$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readBoolean(2, true, true)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminCheckPassword$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __civetAdminCenter_UserManagment$adminCheckPassword$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readBoolean("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminCheckPassword$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminCheckPassword failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminCheckPassword = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminCheckPassword", __civetAdminCenter_UserManagment$adminCheckPassword$PE(info, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminCheckPassword$IF).then(__civetAdminCenter_UserManagment$adminCheckPassword$PD, __civetAdminCenter_UserManagment$adminCheckPassword$ER);
    } else {
        return this._worker.tars_invoke("adminCheckPassword", __civetAdminCenter_UserManagment$adminCheckPassword$IE(info), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminCheckPassword$IF).then(__civetAdminCenter_UserManagment$adminCheckPassword$ID, __civetAdminCenter_UserManagment$adminCheckPassword$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminCheckPassword = __civetAdminCenter_UserManagment$adminCheckPassword$IF;

var __civetAdminCenter_UserManagment$adminDelete$IF = {
    "name" : "adminDelete",
    "return" : "int32",
    "arguments" : [{
        "name" : "id",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminDelete$IE = function (id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, id);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminDelete$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminDelete$PE = function (id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("id", id);
    return tup;
};

var __civetAdminCenter_UserManagment$adminDelete$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminDelete$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminDelete failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminDelete = function (id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminDelete", __civetAdminCenter_UserManagment$adminDelete$PE(id, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminDelete$IF).then(__civetAdminCenter_UserManagment$adminDelete$PD, __civetAdminCenter_UserManagment$adminDelete$ER);
    } else {
        return this._worker.tars_invoke("adminDelete", __civetAdminCenter_UserManagment$adminDelete$IE(id), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminDelete$IF).then(__civetAdminCenter_UserManagment$adminDelete$ID, __civetAdminCenter_UserManagment$adminDelete$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminDelete = __civetAdminCenter_UserManagment$adminDelete$IF;

var __civetAdminCenter_UserManagment$adminEditPassWord$IF = {
    "name" : "adminEditPassWord",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminBasicInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminEditPassWord$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminEditPassWord$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminEditPassWord$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __civetAdminCenter_UserManagment$adminEditPassWord$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminEditPassWord$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminEditPassWord failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminEditPassWord = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminEditPassWord", __civetAdminCenter_UserManagment$adminEditPassWord$PE(info, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminEditPassWord$IF).then(__civetAdminCenter_UserManagment$adminEditPassWord$PD, __civetAdminCenter_UserManagment$adminEditPassWord$ER);
    } else {
        return this._worker.tars_invoke("adminEditPassWord", __civetAdminCenter_UserManagment$adminEditPassWord$IE(info), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminEditPassWord$IF).then(__civetAdminCenter_UserManagment$adminEditPassWord$ID, __civetAdminCenter_UserManagment$adminEditPassWord$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminEditPassWord = __civetAdminCenter_UserManagment$adminEditPassWord$IF;

var __civetAdminCenter_UserManagment$adminQueryAll$IF = {
    "name" : "adminQueryAll",
    "return" : "int32",
    "arguments" : [{
        "name" : "numbers",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Pages",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "AdminMemberList",
        "class" : "list(civetAdminCenter.AdminBasicInfo)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminQueryAll$IE = function (numbers, Pages) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, numbers);
    os.writeInt32(2, Pages);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminQueryAll$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "AdminMemberList" : is.readList(3, true, TarsStream.List(civetAdminCenter.AdminBasicInfo)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminQueryAll$PE = function (numbers, Pages, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("numbers", numbers);
    tup.writeInt32("Pages", Pages);
    return tup;
};

var __civetAdminCenter_UserManagment$adminQueryAll$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "AdminMemberList" : tup.readList("AdminMemberList", TarsStream.List(civetAdminCenter.AdminBasicInfo)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminQueryAll$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminQueryAll failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminQueryAll = function (numbers, Pages) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminQueryAll", __civetAdminCenter_UserManagment$adminQueryAll$PE(numbers, Pages, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminQueryAll$IF).then(__civetAdminCenter_UserManagment$adminQueryAll$PD, __civetAdminCenter_UserManagment$adminQueryAll$ER);
    } else {
        return this._worker.tars_invoke("adminQueryAll", __civetAdminCenter_UserManagment$adminQueryAll$IE(numbers, Pages), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminQueryAll$IF).then(__civetAdminCenter_UserManagment$adminQueryAll$ID, __civetAdminCenter_UserManagment$adminQueryAll$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminQueryAll = __civetAdminCenter_UserManagment$adminQueryAll$IF;

var __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$IF = {
    "name" : "adminQueryByKeyWordStringList",
    "return" : "int32",
    "arguments" : [{
        "name" : "keyword",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "stringWord",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "AdminMemberList",
        "class" : "list(civetAdminCenter.AdminBasicInfo)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$IE = function (keyword, stringWord) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, keyword);
    os.writeString(2, stringWord);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "AdminMemberList" : is.readList(3, true, TarsStream.List(civetAdminCenter.AdminBasicInfo)),
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$PE = function (keyword, stringWord, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("keyword", keyword);
    tup.writeString("stringWord", stringWord);
    return tup;
};

var __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "AdminMemberList" : tup.readList("AdminMemberList", TarsStream.List(civetAdminCenter.AdminBasicInfo)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminQueryByKeyWordStringList failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminQueryByKeyWordStringList = function (keyword, stringWord) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminQueryByKeyWordStringList", __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$PE(keyword, stringWord, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$IF).then(__civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$PD, __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$ER);
    } else {
        return this._worker.tars_invoke("adminQueryByKeyWordStringList", __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$IE(keyword, stringWord), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$IF).then(__civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$ID, __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminQueryByKeyWordStringList = __civetAdminCenter_UserManagment$adminQueryByKeyWordStringList$IF;

var __civetAdminCenter_UserManagment$adminUpdateByString$IF = {
    "name" : "adminUpdateByString",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminBasicInfo",
        "direction" : "in"
    }, {
        "name" : "searchKey",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "searchValue",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_UserManagment$adminUpdateByString$IE = function (info, searchKey, searchValue) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    os.writeString(2, searchKey);
    os.writeString(3, searchValue);
    return os.getBinBuffer();
};

var __civetAdminCenter_UserManagment$adminUpdateByString$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminUpdateByString$PE = function (info, searchKey, searchValue, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    tup.writeString("searchKey", searchKey);
    tup.writeString("searchValue", searchValue);
    return tup;
};

var __civetAdminCenter_UserManagment$adminUpdateByString$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_UserManagment$adminUpdateByString$ER = function (data) {
    throw _makeError(data, "Call UserManagment::adminUpdateByString failed");
};

civetAdminCenter.UserManagmentProxy.prototype.adminUpdateByString = function (info, searchKey, searchValue) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("adminUpdateByString", __civetAdminCenter_UserManagment$adminUpdateByString$PE(info, searchKey, searchValue, version), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminUpdateByString$IF).then(__civetAdminCenter_UserManagment$adminUpdateByString$PD, __civetAdminCenter_UserManagment$adminUpdateByString$ER);
    } else {
        return this._worker.tars_invoke("adminUpdateByString", __civetAdminCenter_UserManagment$adminUpdateByString$IE(info, searchKey, searchValue), arguments[arguments.length - 1], __civetAdminCenter_UserManagment$adminUpdateByString$IF).then(__civetAdminCenter_UserManagment$adminUpdateByString$ID, __civetAdminCenter_UserManagment$adminUpdateByString$ER);
    }
};
civetAdminCenter.UserManagmentProxy.adminUpdateByString = __civetAdminCenter_UserManagment$adminUpdateByString$IF;



