// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "AuthProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var civetAdminCenter = civetAdminCenter || {};
module.exports.civetAdminCenter = civetAdminCenter;

civetAdminCenter.AuthProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

civetAdminCenter.AuthProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

civetAdminCenter.AuthProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

civetAdminCenter.AuthProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

civetAdminCenter.AuthProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

civetAdminCenter.AdminAuthDataInfo = function() {
    this.username = "";
    this.password = "";
    this.phone = "";
    this.wechat = "";
    this.verifyCode = "";
    this.logintype = "";
    this._classname = "civetAdminCenter.AdminAuthDataInfo";
};
civetAdminCenter.AdminAuthDataInfo._classname = "civetAdminCenter.AdminAuthDataInfo";
civetAdminCenter.AdminAuthDataInfo._write = function (os, tag, value) { os.writeStruct(tag, value); };
civetAdminCenter.AdminAuthDataInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
civetAdminCenter.AdminAuthDataInfo._readFrom = function (is) {
    var tmp = new civetAdminCenter.AdminAuthDataInfo;
    tmp.username = is.readString(0, false, "");
    tmp.password = is.readString(1, false, "");
    tmp.phone = is.readString(2, false, "");
    tmp.wechat = is.readString(3, false, "");
    tmp.verifyCode = is.readString(4, false, "");
    tmp.logintype = is.readString(5, false, "");
    return tmp;
};
civetAdminCenter.AdminAuthDataInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.username);
    os.writeString(1, this.password);
    os.writeString(2, this.phone);
    os.writeString(3, this.wechat);
    os.writeString(4, this.verifyCode);
    os.writeString(5, this.logintype);
};
civetAdminCenter.AdminAuthDataInfo.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
civetAdminCenter.AdminAuthDataInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
civetAdminCenter.AdminAuthDataInfo.prototype.toObject = function() { 
    return {
        "username" : this.username,
        "password" : this.password,
        "phone" : this.phone,
        "wechat" : this.wechat,
        "verifyCode" : this.verifyCode,
        "logintype" : this.logintype
    };
};
civetAdminCenter.AdminAuthDataInfo.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "username") && (this.username = json.username);
    _hasOwnProperty.call(json, "password") && (this.password = json.password);
    _hasOwnProperty.call(json, "phone") && (this.phone = json.phone);
    _hasOwnProperty.call(json, "wechat") && (this.wechat = json.wechat);
    _hasOwnProperty.call(json, "verifyCode") && (this.verifyCode = json.verifyCode);
    _hasOwnProperty.call(json, "logintype") && (this.logintype = json.logintype);
    return this;
};
civetAdminCenter.AdminAuthDataInfo.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
civetAdminCenter.AdminAuthDataInfo.new = function () {
    return new civetAdminCenter.AdminAuthDataInfo();
};
civetAdminCenter.AdminAuthDataInfo.create = function (is) {
    return civetAdminCenter.AdminAuthDataInfo._readFrom(is);
};

var __civetAdminCenter_AuthProcess$checkToken$IF = {
    "name" : "checkToken",
    "return" : "int32",
    "arguments" : [{
        "name" : "token",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "bool",
        "direction" : "out"
    }]
};

var __civetAdminCenter_AuthProcess$checkToken$IE = function (token) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, token);
    return os.getBinBuffer();
};

var __civetAdminCenter_AuthProcess$checkToken$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readBoolean(2, true, true)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$checkToken$PE = function (token, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("token", token);
    return tup;
};

var __civetAdminCenter_AuthProcess$checkToken$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readBoolean("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$checkToken$ER = function (data) {
    throw _makeError(data, "Call AuthProcess::checkToken failed");
};

civetAdminCenter.AuthProcessProxy.prototype.checkToken = function (token) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkToken", __civetAdminCenter_AuthProcess$checkToken$PE(token, version), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$checkToken$IF).then(__civetAdminCenter_AuthProcess$checkToken$PD, __civetAdminCenter_AuthProcess$checkToken$ER);
    } else {
        return this._worker.tars_invoke("checkToken", __civetAdminCenter_AuthProcess$checkToken$IE(token), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$checkToken$IF).then(__civetAdminCenter_AuthProcess$checkToken$ID, __civetAdminCenter_AuthProcess$checkToken$ER);
    }
};
civetAdminCenter.AuthProcessProxy.checkToken = __civetAdminCenter_AuthProcess$checkToken$IF;

var __civetAdminCenter_AuthProcess$login$IF = {
    "name" : "login",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminAuthDataInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "token",
        "class" : "string",
        "direction" : "out"
    }]
};

var __civetAdminCenter_AuthProcess$login$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __civetAdminCenter_AuthProcess$login$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0),
                    "token" : is.readString(3, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$login$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __civetAdminCenter_AuthProcess$login$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result"),
                    "token" : tup.readString("token")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$login$ER = function (data) {
    throw _makeError(data, "Call AuthProcess::login failed");
};

civetAdminCenter.AuthProcessProxy.prototype.login = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("login", __civetAdminCenter_AuthProcess$login$PE(info, version), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$login$IF).then(__civetAdminCenter_AuthProcess$login$PD, __civetAdminCenter_AuthProcess$login$ER);
    } else {
        return this._worker.tars_invoke("login", __civetAdminCenter_AuthProcess$login$IE(info), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$login$IF).then(__civetAdminCenter_AuthProcess$login$ID, __civetAdminCenter_AuthProcess$login$ER);
    }
};
civetAdminCenter.AuthProcessProxy.login = __civetAdminCenter_AuthProcess$login$IF;

var __civetAdminCenter_AuthProcess$loginByPhone$IF = {
    "name" : "loginByPhone",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminAuthDataInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_AuthProcess$loginByPhone$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __civetAdminCenter_AuthProcess$loginByPhone$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$loginByPhone$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __civetAdminCenter_AuthProcess$loginByPhone$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$loginByPhone$ER = function (data) {
    throw _makeError(data, "Call AuthProcess::loginByPhone failed");
};

civetAdminCenter.AuthProcessProxy.prototype.loginByPhone = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("loginByPhone", __civetAdminCenter_AuthProcess$loginByPhone$PE(info, version), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$loginByPhone$IF).then(__civetAdminCenter_AuthProcess$loginByPhone$PD, __civetAdminCenter_AuthProcess$loginByPhone$ER);
    } else {
        return this._worker.tars_invoke("loginByPhone", __civetAdminCenter_AuthProcess$loginByPhone$IE(info), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$loginByPhone$IF).then(__civetAdminCenter_AuthProcess$loginByPhone$ID, __civetAdminCenter_AuthProcess$loginByPhone$ER);
    }
};
civetAdminCenter.AuthProcessProxy.loginByPhone = __civetAdminCenter_AuthProcess$loginByPhone$IF;

var __civetAdminCenter_AuthProcess$loginByWechat$IF = {
    "name" : "loginByWechat",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "civetAdminCenter.AdminAuthDataInfo",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_AuthProcess$loginByWechat$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __civetAdminCenter_AuthProcess$loginByWechat$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$loginByWechat$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __civetAdminCenter_AuthProcess$loginByWechat$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$loginByWechat$ER = function (data) {
    throw _makeError(data, "Call AuthProcess::loginByWechat failed");
};

civetAdminCenter.AuthProcessProxy.prototype.loginByWechat = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("loginByWechat", __civetAdminCenter_AuthProcess$loginByWechat$PE(info, version), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$loginByWechat$IF).then(__civetAdminCenter_AuthProcess$loginByWechat$PD, __civetAdminCenter_AuthProcess$loginByWechat$ER);
    } else {
        return this._worker.tars_invoke("loginByWechat", __civetAdminCenter_AuthProcess$loginByWechat$IE(info), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$loginByWechat$IF).then(__civetAdminCenter_AuthProcess$loginByWechat$ID, __civetAdminCenter_AuthProcess$loginByWechat$ER);
    }
};
civetAdminCenter.AuthProcessProxy.loginByWechat = __civetAdminCenter_AuthProcess$loginByWechat$IF;

var __civetAdminCenter_AuthProcess$logout$IF = {
    "name" : "logout",
    "return" : "int32",
    "arguments" : [{
        "name" : "token",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __civetAdminCenter_AuthProcess$logout$IE = function (token) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, token);
    return os.getBinBuffer();
};

var __civetAdminCenter_AuthProcess$logout$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$logout$PE = function (token, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("token", token);
    return tup;
};

var __civetAdminCenter_AuthProcess$logout$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$logout$ER = function (data) {
    throw _makeError(data, "Call AuthProcess::logout failed");
};

civetAdminCenter.AuthProcessProxy.prototype.logout = function (token) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("logout", __civetAdminCenter_AuthProcess$logout$PE(token, version), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$logout$IF).then(__civetAdminCenter_AuthProcess$logout$PD, __civetAdminCenter_AuthProcess$logout$ER);
    } else {
        return this._worker.tars_invoke("logout", __civetAdminCenter_AuthProcess$logout$IE(token), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$logout$IF).then(__civetAdminCenter_AuthProcess$logout$ID, __civetAdminCenter_AuthProcess$logout$ER);
    }
};
civetAdminCenter.AuthProcessProxy.logout = __civetAdminCenter_AuthProcess$logout$IF;

var __civetAdminCenter_AuthProcess$refreshToken$IF = {
    "name" : "refreshToken",
    "return" : "int32",
    "arguments" : [{
        "name" : "oldtoken",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "newtoken",
        "class" : "string",
        "direction" : "out"
    }]
};

var __civetAdminCenter_AuthProcess$refreshToken$IE = function (oldtoken) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, oldtoken);
    return os.getBinBuffer();
};

var __civetAdminCenter_AuthProcess$refreshToken$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "newtoken" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$refreshToken$PE = function (oldtoken, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("oldtoken", oldtoken);
    return tup;
};

var __civetAdminCenter_AuthProcess$refreshToken$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "newtoken" : tup.readString("newtoken")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __civetAdminCenter_AuthProcess$refreshToken$ER = function (data) {
    throw _makeError(data, "Call AuthProcess::refreshToken failed");
};

civetAdminCenter.AuthProcessProxy.prototype.refreshToken = function (oldtoken) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("refreshToken", __civetAdminCenter_AuthProcess$refreshToken$PE(oldtoken, version), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$refreshToken$IF).then(__civetAdminCenter_AuthProcess$refreshToken$PD, __civetAdminCenter_AuthProcess$refreshToken$ER);
    } else {
        return this._worker.tars_invoke("refreshToken", __civetAdminCenter_AuthProcess$refreshToken$IE(oldtoken), arguments[arguments.length - 1], __civetAdminCenter_AuthProcess$refreshToken$IF).then(__civetAdminCenter_AuthProcess$refreshToken$ID, __civetAdminCenter_AuthProcess$refreshToken$ER);
    }
};
civetAdminCenter.AuthProcessProxy.refreshToken = __civetAdminCenter_AuthProcess$refreshToken$IF;



